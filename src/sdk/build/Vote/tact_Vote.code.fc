#pragma version =0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "tact_Vote.headers.fc";
#include "tact_Vote.stdlib.fc";
#include "tact_Vote.storage.fc";

;;
;; Contract Vote functions
;;

(slice, slice, int, int) $Vote$_contract_init(slice $voting, slice $owner) impure inline_ref {
    var (($self'owner, $self'voting, $self'candidateInd, $self'numOfVotes)) = (null(), null(), null(), null());
    throw_unless(37618, ( __tact_slice_eq_bits($voting, __tact_context_get_sender()) ));
    $self'owner = $owner;
    $self'voting = $voting;
    $self'candidateInd = (- 1);
    $self'numOfVotes = 0;
    return ($self'owner, $self'voting, $self'candidateInd, $self'numOfVotes);
}

((slice, slice, int, int), slice) $Vote$_fun_voting((slice, slice, int, int) $self) impure inline_ref {
    var (($self'owner, $self'voting, $self'candidateInd, $self'numOfVotes)) = $self;
    return (($self'owner, $self'voting, $self'candidateInd, $self'numOfVotes), $self'voting);
}

((slice, slice, int, int), int) $Vote$_fun_candidateInd((slice, slice, int, int) $self) impure inline_ref {
    var (($self'owner, $self'voting, $self'candidateInd, $self'numOfVotes)) = $self;
    return (($self'owner, $self'voting, $self'candidateInd, $self'numOfVotes), $self'candidateInd);
}

((slice, slice, int, int), int) $Vote$_fun_numOfVotes((slice, slice, int, int) $self) impure inline_ref {
    var (($self'owner, $self'voting, $self'candidateInd, $self'numOfVotes)) = $self;
    return (($self'owner, $self'voting, $self'candidateInd, $self'numOfVotes), $self'numOfVotes);
}

((slice, slice, int, int), slice) $Vote$_fun_owner((slice, slice, int, int) $self) impure inline_ref {
    var (($self'owner, $self'voting, $self'candidateInd, $self'numOfVotes)) = $self;
    return (($self'owner, $self'voting, $self'candidateInd, $self'numOfVotes), $self'owner);
}

;;
;; Receivers of a Contract Vote
;;

(((slice, slice, int, int)), ()) $Vote$_internal_binary_CastVote((slice, slice, int, int) $self, (slice, int, int) $msg) impure inline {
    var ($self'owner, $self'voting, $self'candidateInd, $self'numOfVotes) = $self;
    var ($msg'owner, $msg'candidateInd, $msg'numOfVotes) = $msg;
    int $isOwner = ( __tact_slice_eq_bits($self'owner, $msg'owner) );
    int $noVotes = ($self'numOfVotes == 0);
    if ((~ ( ($isOwner) ? ($noVotes) : (false) ))) {
        $global_send($SendParameters$_constructor_to_value_bounce_mode($self'owner, 0, true, 64));
    }
    throw_unless(28869, $noVotes);
    throw_unless(26215, $isOwner);
    $self'owner = $msg'owner;
    $self'candidateInd = $msg'candidateInd;
    $self'numOfVotes = $msg'numOfVotes;
    ($self'owner, $self'voting, $self'candidateInd, $self'numOfVotes)~$Vote$_fun_reply($DeployAndCastVoteOk$_store_cell($DeployAndCastVoteOk$_constructor_voter_candidateInd_numOfVotes($self'owner, $msg'candidateInd, $msg'numOfVotes)));
    return (($self'owner, $self'voting, $self'candidateInd, $self'numOfVotes), ());
}

(((slice, slice, int, int)), ()) $Vote$_internal_binary_Deploy((slice, slice, int, int) $self, (int) $deploy) impure inline {
    var ($self'owner, $self'voting, $self'candidateInd, $self'numOfVotes) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'owner, $self'voting, $self'candidateInd, $self'numOfVotes)~$Vote$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'owner, $self'voting, $self'candidateInd, $self'numOfVotes), ());
}

;;
;; Get methods of a Contract Vote
;;

_ %voting() method_id(68930) {
    var self = $Vote$_contract_load();
    var res = self~$Vote$_fun_voting();
    return res;
}

_ %candidateInd() method_id(121929) {
    var self = $Vote$_contract_load();
    var res = self~$Vote$_fun_candidateInd();
    return res;
}

_ %numOfVotes() method_id(72636) {
    var self = $Vote$_contract_load();
    var res = self~$Vote$_fun_numOfVotes();
    return res;
}

_ %owner() method_id(83229) {
    var self = $Vote$_contract_load();
    var res = self~$Vote$_fun_owner();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128,
        "org.ton.ownable"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmVQQpvNnbQdYR59MXhVxeptgRZUCPhKPCuybcBmi4zKdv";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract Vote
;;

((slice, slice, int, int), int) $Vote$_contract_router_internal((slice, slice, int, int) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive CastVote message
    if (op == 1300754827) {
        var msg = in_msg~$CastVote$_load();
        self~$Vote$_internal_binary_CastVote(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$Vote$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $Vote$_contract_load();
    
    ;; Handle operation
    int handled = self~$Vote$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $Vote$_contract_store(self);
}
