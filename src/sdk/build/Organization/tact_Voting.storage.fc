;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: Context
;; TLB: _ bounced:bool sender:address value:int257 raw:^slice = Context
;;

_ $Context$_get_value((int, slice, int, slice) v) inline {
    var (v'bounced, v'sender, v'value, v'raw) = v;
    return v'value;
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode_body(slice to, int value, int bounce, int mode, cell body) inline {
    return (bounce, to, value, mode, body, null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode_body_code_data(slice to, int value, int bounce, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_bounce_value_mode(slice to, int bounce, int value, int mode) inline {
    return (bounce, to, value, mode, null(), null(), null());
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: Metadata
;; TLB: _ name:^string description:^string emoji:^string website:^string = Metadata
;;

builder $Metadata$_store(builder build_0, (slice, slice, slice, slice) v) inline {
    var (v'name, v'description, v'emoji, v'website) = v;
    build_0 = build_0.store_ref(begin_cell().store_slice(v'name).end_cell());
    build_0 = build_0.store_ref(begin_cell().store_slice(v'description).end_cell());
    build_0 = build_0.store_ref(begin_cell().store_slice(v'emoji).end_cell());
    var build_1 = begin_cell();
    build_1 = build_1.store_ref(begin_cell().store_slice(v'website).end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((slice, slice, slice, slice))) $Metadata$_load(slice sc_0) inline {
    var v'name = sc_0~load_ref().begin_parse();
    var v'description = sc_0~load_ref().begin_parse();
    var v'emoji = sc_0~load_ref().begin_parse();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'website = sc_1~load_ref().begin_parse();
    return (sc_0, (v'name, v'description, v'emoji, v'website));
}

(slice, slice, slice, slice) $Metadata$_to_external(((slice, slice, slice, slice)) v) inline {
    var (v'name, v'description, v'emoji, v'website) = v; 
    return (v'name, v'description, v'emoji, v'website);
}

((slice, slice, slice, slice)) $Metadata$_constructor_name_description_emoji_website(slice name, slice description, slice emoji, slice website) inline {
    return (name, description, emoji, website);
}

;;
;; Type: CandidateArray
;; TLB: _ size:uint8 candidates:dict<uint64, ^Candidate{name:^string,info:^string,votes:uint64}> = CandidateArray
;;

builder $CandidateArray$_store(builder build_0, (int, cell) v) inline {
    var (v'size, v'candidates) = v;
    build_0 = build_0.store_uint(v'size, 8);
    build_0 = build_0.store_dict(v'candidates);
    return build_0;
}

(slice, ((int, cell))) $CandidateArray$_load(slice sc_0) inline {
    var v'size = sc_0~load_uint(8);
    var v'candidates = sc_0~load_dict();
    return (sc_0, (v'size, v'candidates));
}

(int, cell) $CandidateArray$_to_external(((int, cell)) v) inline {
    var (v'size, v'candidates) = v; 
    return (v'size, v'candidates);
}

((int, cell)) $CandidateArray$_constructor_size_candidates(int size, cell candidates) inline {
    return (size, candidates);
}

;;
;; Type: TransferOwnership
;; Header: 0x70373fea
;; TLB: transfer_ownership#70373fea newOwner:address = TransferOwnership
;;

(slice, ((slice))) $TransferOwnership$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1882669034);
    var v'newOwner = sc_0~__tact_load_address();
    return (sc_0, (v'newOwner));
}

;;
;; Type: Candidate
;; TLB: _ name:^string info:^string votes:uint64 = Candidate
;;

builder $Candidate$_store(builder build_0, (slice, slice, int) v) inline {
    var (v'name, v'info, v'votes) = v;
    build_0 = build_0.store_ref(begin_cell().store_slice(v'name).end_cell());
    build_0 = build_0.store_ref(begin_cell().store_slice(v'info).end_cell());
    build_0 = build_0.store_uint(v'votes, 64);
    return build_0;
}

cell $Candidate$_store_cell((slice, slice, int) v) inline {
    return $Candidate$_store(begin_cell(), v).end_cell();
}

(slice, ((slice, slice, int))) $Candidate$_load(slice sc_0) inline {
    var v'name = sc_0~load_ref().begin_parse();
    var v'info = sc_0~load_ref().begin_parse();
    var v'votes = sc_0~load_uint(64);
    return (sc_0, (v'name, v'info, v'votes));
}

tuple $Candidate$_as_optional((slice, slice, int) v) inline {
    var (v'name, v'info, v'votes) = v;
    return __tact_tuple_create_3(v'name, v'info, v'votes);
}

tuple $Candidate$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $Candidate$_as_optional(sc~$Candidate$_load());
}

((slice, slice, int)) $Candidate$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (slice vvv'name, slice vvv'info, int vvv'votes) = __tact_tuple_destroy_3(v);
    return (vvv'name, vvv'info, vvv'votes);
}

((slice, slice, int)) $Candidate$_constructor_name_info_votes(slice name, slice info, int votes) inline {
    return (name, info, votes);
}

;;
;; Type: InitVoting
;; Header: 0xfd1fc2bf
;; TLB: init_voting#fd1fc2bf owner:address candidates:CandidateArray{size:uint8,candidates:dict<uint64, ^Candidate{name:^string,info:^string,votes:uint64}>} voteFee:uint64 votesPerCandidate:uint8 startTime:uint64 timeToLive:uint64 = InitVoting
;;

(slice, ((slice, (int, cell), int, int, int, int))) $InitVoting$_load(slice sc_0) inline_ref {
    throw_unless(129, sc_0~load_uint(32) == 4246717119);
    var v'owner = sc_0~__tact_load_address();
    var v'candidates = sc_0~$CandidateArray$_load();
    var v'voteFee = sc_0~load_uint(64);
    var v'votesPerCandidate = sc_0~load_uint(8);
    var v'startTime = sc_0~load_uint(64);
    var v'timeToLive = sc_0~load_uint(64);
    return (sc_0, (v'owner, v'candidates, v'voteFee, v'votesPerCandidate, v'startTime, v'timeToLive));
}

;;
;; Type: InitVotingWithMetadata
;; Header: 0xdc1d2ffc
;; TLB: init_voting_with_metadata#dc1d2ffc owner:address candidates:CandidateArray{size:uint8,candidates:dict<uint64, ^Candidate{name:^string,info:^string,votes:uint64}>} voteFee:uint64 votesPerCandidate:uint8 startTime:uint64 timeToLive:uint64 metadata:Metadata{name:^string,description:^string,emoji:^string,website:^string} = InitVotingWithMetadata
;;

(slice, ((slice, (int, cell), int, int, int, int, (slice, slice, slice, slice)))) $InitVotingWithMetadata$_load(slice sc_0) inline_ref {
    throw_unless(129, sc_0~load_uint(32) == 3692900348);
    var v'owner = sc_0~__tact_load_address();
    var v'candidates = sc_0~$CandidateArray$_load();
    var v'voteFee = sc_0~load_uint(64);
    var v'votesPerCandidate = sc_0~load_uint(8);
    var v'startTime = sc_0~load_uint(64);
    var v'timeToLive = sc_0~load_uint(64);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'metadata = sc_1~$Metadata$_load();
    return (sc_0, (v'owner, v'candidates, v'voteFee, v'votesPerCandidate, v'startTime, v'timeToLive, v'metadata));
}

;;
;; Type: DeployAndCastVote
;; Header: 0x61e07107
;; TLB: deploy_and_cast_vote#61e07107 candidateInd:uint8 numOfVotes:uint8 = DeployAndCastVote
;;

(slice, ((int, int))) $DeployAndCastVote$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1642098951);
    var v'candidateInd = sc_0~load_uint(8);
    var v'numOfVotes = sc_0~load_uint(8);
    return (sc_0, (v'candidateInd, v'numOfVotes));
}

;;
;; Type: DeployAndCastVoteOk
;; Header: 0xf60d9235
;; TLB: deploy_and_cast_vote_ok#f60d9235 voter:address candidateInd:uint8 numOfVotes:uint8 = DeployAndCastVoteOk
;;

(slice, ((slice, int, int))) $DeployAndCastVoteOk$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 4128084533);
    var v'voter = sc_0~__tact_load_address();
    var v'candidateInd = sc_0~load_uint(8);
    var v'numOfVotes = sc_0~load_uint(8);
    return (sc_0, (v'voter, v'candidateInd, v'numOfVotes));
}

;;
;; Type: VotingBasicInfo
;; TLB: _ emoji:^string name:^string startTime:uint64 endTime:uint64 = VotingBasicInfo
;;

(slice, slice, int, int) $VotingBasicInfo$_to_external(((slice, slice, int, int)) v) inline {
    var (v'emoji, v'name, v'startTime, v'endTime) = v; 
    return (v'emoji, v'name, v'startTime, v'endTime);
}

((slice, slice, int, int)) $VotingBasicInfo$_constructor_emoji_name_startTime_endTime(slice emoji, slice name, int startTime, int endTime) inline {
    return (emoji, name, startTime, endTime);
}

;;
;; Type: VotingAllInfo
;; TLB: _ organization:address owner:address emoji:^string name:^string description:^string numOfVotes:uint64 voteFee:uint64 votesPerCandidate:uint8 startTime:uint64 endTime:uint64 = VotingAllInfo
;;

(slice, slice, slice, slice, slice, int, int, int, int, int) $VotingAllInfo$_to_external(((slice, slice, slice, slice, slice, int, int, int, int, int)) v) inline {
    var (v'organization, v'owner, v'emoji, v'name, v'description, v'numOfVotes, v'voteFee, v'votesPerCandidate, v'startTime, v'endTime) = v; 
    return (v'organization, v'owner, v'emoji, v'name, v'description, v'numOfVotes, v'voteFee, v'votesPerCandidate, v'startTime, v'endTime);
}

((slice, slice, slice, slice, slice, int, int, int, int, int)) $VotingAllInfo$_constructor_organization_owner_emoji_name_description_numOfVotes_voteFee_votesPerCandidate_startTime_endTime(slice organization, slice owner, slice emoji, slice name, slice description, int numOfVotes, int voteFee, int votesPerCandidate, int startTime, int endTime) inline {
    return (organization, owner, emoji, name, description, numOfVotes, voteFee, votesPerCandidate, startTime, endTime);
}

;;
;; Type: CastVote
;; Header: 0x4d87f18b
;; TLB: cast_vote#4d87f18b owner:address candidateInd:uint8 numOfVotes:uint8 = CastVote
;;

builder $CastVote$_store(builder build_0, (slice, int, int) v) inline {
    var (v'owner, v'candidateInd, v'numOfVotes) = v;
    build_0 = store_uint(build_0, 1300754827, 32);
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = build_0.store_uint(v'candidateInd, 8);
    build_0 = build_0.store_uint(v'numOfVotes, 8);
    return build_0;
}

cell $CastVote$_store_cell((slice, int, int) v) inline {
    return $CastVote$_store(begin_cell(), v).end_cell();
}

((slice, int, int)) $CastVote$_constructor_owner_candidateInd_numOfVotes(slice owner, int candidateInd, int numOfVotes) inline {
    return (owner, candidateInd, numOfVotes);
}

;;
;; Type: Voting
;;

builder $Voting$_store(builder build_0, (slice, slice, int, (int, cell), (slice, slice, slice, slice), int, int, int, int) v) inline {
    var (v'owner, v'organization, v'votingId, (v'candidates'size, v'candidates'candidates), (v'metadata'name, v'metadata'description, v'metadata'emoji, v'metadata'website), v'voteFee, v'votesPerCandidate, v'startTime, v'timeToLive) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = __tact_store_address(build_0, v'organization);
    build_0 = build_0.store_uint(v'votingId, 64);
    build_0 = $CandidateArray$_store(build_0, (v'candidates'size, v'candidates'candidates));
    var build_1 = begin_cell();
    build_1 = $Metadata$_store(build_1, (v'metadata'name, v'metadata'description, v'metadata'emoji, v'metadata'website));
    build_1 = build_1.store_uint(v'voteFee, 64);
    build_1 = build_1.store_uint(v'votesPerCandidate, 8);
    build_1 = build_1.store_uint(v'startTime, 64);
    build_1 = build_1.store_uint(v'timeToLive, 64);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((slice, slice, int, (int, cell), (slice, slice, slice, slice), int, int, int, int))) $Voting$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'organization = sc_0~__tact_load_address();
    var v'votingId = sc_0~load_uint(64);
    var v'candidates = sc_0~$CandidateArray$_load();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'metadata = sc_1~$Metadata$_load();
    var v'voteFee = sc_1~load_uint(64);
    var v'votesPerCandidate = sc_1~load_uint(8);
    var v'startTime = sc_1~load_uint(64);
    var v'timeToLive = sc_1~load_uint(64);
    return (sc_0, (v'owner, v'organization, v'votingId, v'candidates, v'metadata, v'voteFee, v'votesPerCandidate, v'startTime, v'timeToLive));
}

(slice, ((slice, int))) $Voting$init$_load(slice sc_0) inline {
    var v'organization = sc_0~__tact_load_address();
    var v'votingId = sc_0~load_int(257);
    return (sc_0, (v'organization, v'votingId));
}

(slice, slice, int, (int, cell), (slice, slice, slice, slice), int, int, int, int) $Voting$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$Voting$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice organization, int votingId) = $sc~$Voting$init$_load();
        $sc.end_parse();
        return $Voting$_contract_init(organization, votingId);
    }
}

() $Voting$_contract_store((slice, slice, int, (int, cell), (slice, slice, slice, slice), int, int, int, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $Voting$_store(b, v);
    set_data(b.end_cell());
}

;;
;; Type: Vote
;;

builder $Vote$init$_store(builder build_0, (slice, slice) v) inline {
    var (v'voting, v'owner) = v;
    build_0 = __tact_store_address(build_0, v'voting);
    build_0 = __tact_store_address(build_0, v'owner);
    return build_0;
}

(cell, cell) $Vote$_init_child(cell sys', slice $voting, slice $owner) inline_ref {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: Vote
    cell mine = __tact_dict_get_code(source, 7526);
    contracts = __tact_dict_set_code(contracts, 7526, mine);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $Vote$init$_store(b, ($voting, $owner));
    return (mine, b.end_cell());
}