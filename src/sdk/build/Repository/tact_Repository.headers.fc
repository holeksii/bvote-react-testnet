;;
;; Header files for Repository
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_create_address
slice __tact_create_address(int chain, int hash) inline;

;; __tact_compute_contract_address
slice __tact_compute_contract_address(int chain, cell code, cell data) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; __tact_dict_set_code
cell __tact_dict_set_code(cell dict, int id, cell code) inline;

;; __tact_dict_get_code
cell __tact_dict_get_code(cell dict, int id) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $Metadata$_store
builder $Metadata$_store(builder build_0, (slice, slice, slice, slice) v) inline;

;; $Metadata$_load
(slice, ((slice, slice, slice, slice))) $Metadata$_load(slice sc_0) inline;

;; $DeployOrganizationWithMetadata$_load
(slice, (((slice, slice, slice, slice)))) $DeployOrganizationWithMetadata$_load(slice sc_0) inline;

;; $SetDeployOrgFee$_load
(slice, ((int))) $SetDeployOrgFee$_load(slice sc_0) inline;

;; $Withdraw$_load
(slice, ((int))) $Withdraw$_load(slice sc_0) inline;

;; $TransferOwnership$_load
(slice, ((slice))) $TransferOwnership$_load(slice sc_0) inline;

;; $InitOrganization$_store
builder $InitOrganization$_store(builder build_0, (slice) v) inline;

;; $InitOrganization$_store_cell
cell $InitOrganization$_store_cell((slice) v) inline;

;; $InitOrganizationWithMetadata$_store
builder $InitOrganizationWithMetadata$_store(builder build_0, (slice, (slice, slice, slice, slice)) v) inline;

;; $InitOrganizationWithMetadata$_store_cell
cell $InitOrganizationWithMetadata$_store_cell((slice, (slice, slice, slice, slice)) v) inline;

;; $Repository$_store
builder $Repository$_store(builder build_0, (slice, int, int, int) v) inline;

;; $Repository$_load
(slice, ((slice, int, int, int))) $Repository$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $Context$_get_value
_ $Context$_get_value((int, slice, int, slice) v) inline;

;; $Organization$init$_store
builder $Organization$init$_store(builder build_0, (slice, int) v) inline;

;; $Repository$init$_load
(slice, ((int))) $Repository$init$_load(slice sc_0) inline;

;; $Repository$_contract_init
(slice, int, int, int) $Repository$_contract_init(int $repositoryId) impure inline_ref;

;; $Repository$_contract_load
(slice, int, int, int) $Repository$_contract_load() impure inline_ref;

;; $Repository$_contract_store
() $Repository$_contract_store((slice, int, int, int) v) impure inline;

;; $global_contractAddress
slice $global_contractAddress((cell, cell) $s) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $Organization$_init_child
(cell, cell) $Organization$_init_child(cell sys', slice $repository, int $organizationId) inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline;

;; $Repository$_fun_numOfOrganizations
((slice, int, int, int), int) $Repository$_fun_numOfOrganizations((slice, int, int, int) $self) impure inline_ref;

;; $Repository$_fun_deployOrganizationFee
((slice, int, int, int), int) $Repository$_fun_deployOrganizationFee((slice, int, int, int) $self) impure inline_ref;

;; $Repository$_fun_deployOrganizationFeePlusTonToLive
((slice, int, int, int), int) $Repository$_fun_deployOrganizationFeePlusTonToLive((slice, int, int, int) $self) impure inline_ref;

;; $Repository$_fun_organizationAddress
((slice, int, int, int), slice) $Repository$_fun_organizationAddress((slice, int, int, int) $self, int $organizationId) impure inline_ref;

;; $Repository$_fun_lastOrganizationAddress
((slice, int, int, int), slice) $Repository$_fun_lastOrganizationAddress((slice, int, int, int) $self) impure inline_ref;

;; $Repository$_fun_forward
((slice, int, int, int), ()) $Repository$_fun_forward((slice, int, int, int) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $Repository$_fun_notify
((slice, int, int, int), ()) $Repository$_fun_notify((slice, int, int, int) $self, cell $body) impure inline;

;; $Repository$_fun_requireOwner
((slice, int, int, int), ()) $Repository$_fun_requireOwner((slice, int, int, int) $self) impure inline_ref;

;; $Repository$_fun_owner
((slice, int, int, int), slice) $Repository$_fun_owner((slice, int, int, int) $self) impure inline_ref;

;; $SendParameters$_constructor_to_value_bounce_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode_body_code_data(slice to, int value, int bounce, int mode, cell body, cell code, cell data) inline;

;; $InitOrganization$_constructor_owner
((slice)) $InitOrganization$_constructor_owner(slice owner) inline;

;; $InitOrganizationWithMetadata$_constructor_owner_metadata
((slice, (slice, slice, slice, slice))) $InitOrganizationWithMetadata$_constructor_owner_metadata(slice owner, (slice, slice, slice, slice) metadata) inline;

;; $SendParameters$_constructor_to_bounce_value_mode
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_bounce_value_mode(slice to, int bounce, int value, int mode) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int queryId) inline;
